# Load R scripts from package
devtools::load_all()

#### Main Analysis ####
####################################################################################################!

# Load .bim / .frq.strat files
bim.frq <- load_bim_frq2(file_path = "nam_phased_adj")

# PBS for individuals SNPs
pbs <- pbs_fst2(geno.info = bim.frq, focal = "BRZ", close = "MES", outgroup = "EAS")
# manhattan_plot(pbs_data = pbs, col_name = 'PBS', fig_name = 'pbs_whole.png')

# PBS for mean of SNPs
pbs_mean <- sliding_window_mean_dt(pbs, 'PBS')
pbs_mean_peaks <- get_peaks2(pbs_mean)


pbs_mean_peaks[, GENE := sapply(GENE, function(.){
  genes <- unlist(strsplit(., ","))
  genes <- genes[!grepl("LOC", genes)]
  paste(genes, collapse = ",")
})]

keys <- .

pbs_mean_peaks[17]

gt::see(pbs_mean_peaks)
pbs_plot <- pbs_dt[CHR == 2 & POS == 163153981][, GENE := snp.annot(SNP)]

mplot <- manhattan_plot(pbs_data = pbs_mean, col_name = 'PBS', fig_name = 'pbs_mean.png')

setkey(all_peakv, CHR, CM, POS, SNP, PBS)
setkey(mplot$data, CHR, CM, POS, SNP, PBS)
setkey(maxv_per_chr, CHR, CM, POS, SNP, PBS)


maxv_per_chr <- pbs_mean_peaks[pbs_mean_peaks[, .I[which.max(PBS)], by = CHR]$V1]
maxv_per_chr <- maxv_per_chr[mplot$data][!is.na(GENE)]
all_peakv <- copy(pbs_mean_peaks)
all_peakv <- all_peakv[mplot$data][!is.na(GENE)]
all_peakv <- all_peakv[all_peakv[, .I[which.max(PBS)], by = GENE]$V1]

# Plot only max peak values by chromosome
mplot +
  ggrepel::geom_label_repel(data = maxv_per_chr, mapping = aes(x = position, y = PBS),
                            label = maxv_per_chr[, GENE], size = 3L, vjust = 1)

# Plot all peak values
mplot +
  ggrepel::geom_text_repel(data = all_peakv, mapping = aes(x = position, y = PBS),
                            label = all_peakv[, GENE], size = 2.5,
                           vjust = 0.5, nudge_x = -0.35)



pbs_mean <- rolling_mean_n(pbs, col_name = 'PBS', window_s = 20, step_s = 5)
pbs_mean[, P_RANK := 1 - frankv(PBS_MEAN) / (.N + 1)]
manhattan_plot(pbs_data = pbs_mean, col_name = 'PBS_MEAN', fig_name = 'pbs_mean.png')

pbs_p99 <- pbs_mean[PBS_MEAN >= quantile(PBS_MEAN, 0.999)]
pbs_p99[, GENE := LD::snp.annot(SNP)]
pbs_p99[CHR == 22]

# PBS for median of SNPs
pbs_median <- rolling_median_n(pbs, col_name = 'PBS', window_s = 20, step_s = 5)
manhattan_plot(pbs_data = pbs_median, col_name = 'PBS_MEDIAN', fig_name = 'pbs_median.png')

#### Analysing P-values ####
####################################################################################################!

# Individual SNPs
pbs[, P_RANK := 1 - frankv(PBS, ties = 'random') / (.N + 1)]
pbs[, LOG_PVAL := -log(P_RANK)]

# PBS for mean of SNPs
pbs_mean[, P_RANK := 1 - frankv(PBS_MEAN) / (.N + 1)]
pbs_mean[, LOG_PVAL := - log(P_RANK)]

# PBS for median of SNPs
pbs_median[, P_RANK := 1 - frankv(PBS_MEDIAN, ties = 'random') / (.N + 1)]
pbs_median[, LOG_PVAL := -log(P_RANK)]

# Getting Peaks
peaks_mean <- get_peaks(pbs, pbs_mean, stat_col = 'PBS',
                        score_col = 'P_RANK', score_th = 0.01,
                        window_s = 20, greater = FALSE)
peaks_median <-
  get_peaks(pbs, pbs_median, stat_col = 'PBS',
            score_col = 'P_RANK', score_th = 0.01,
            window_s = 20, greater = FALSE)


pbs_median[peaks_median[CHR == 2], on = .(CHR, CM, W_ID)]
pbs_median[, summary(LOG_PVAL)]


#### Extra section: comparing fst values ####
####################################################################################################!

# from Kelly
kelly_res <- fread("FST_AMZ2_MES_EAS.txt")

# herein
bim.frq <- load_bim_frq2(file_path = "nam_phased_adj")

res <- data.table (
  reynolds_fst(bim.frq, pop1 = "MES", pop2 = "BRZ")[, c(2,5)],
  reynolds_fst(bim.frq, pop1 = "EAS", pop2 = "BRZ")[, 5L],
  reynolds_fst(bim.frq, pop1 = "EAS", pop2 = "MES")[, 5L]
)

# MES NAM
merge(x = res[, .(SNP, FST.MES.BRZ)], y = kelly_res[, .(rs, FST.MES.NAM)],
      by.x = "SNP", by.y = "rs", sort = F)[, round(.SD, 4L), .SDcols = 2:3
                                           ]

# EAS NAM
merge(x = res[, .(SNP, FST.EAS.BRZ)], y = kelly_res[, .(rs, FST.EAS.NAM)],
      by.x = "SNP", by.y = "rs", sort = F)[, round(.SD, 4L), .SDcols = 2:3
                                           ]

# EAS MES
merge(x = res[, .(SNP, FST.EAS.MES)], y = kelly_res[, .(rs, FST.EAS.MES)],
      by.x = "SNP", by.y = "rs", sort = F)[, round(.SD, 4L), .SDcols = 2:3

                                                                                ]
#### Testing FST/PBS Mean ####
####################################################################################################!

# Loading scripts
devtools::load_all()

# Load .bim / .frq.strat files
bim.frq <- load_bim_frq2(file_path = "nam_phased_adj")

### PBS Mean
pbs_mean <- pbs_fst2(frq = bim.frq, focal = "BRZ", close = "MES", outgroup = "EAS")
pbs_mean <- sliding_window_mean_dt(pbs_mean, "PBS")
manhattan_plot(pbs_data = pbs_mean, col_name = 'PBS', fig_name = 'pbs_mean.png')


### Fst Mean
frq = bim.frq
focal = "BRZ"
close = "MES"
outgroup = "EAS"

focal <- frq$frq[CLST == focal, MAF]
close <- frq$frq[CLST == close, MAF]
outgroup <- frq$frq[CLST == outgroup, MAF]

quick_fst <- function(p1, p2) {
  n <- ((p1 - p2)^2) + (((1 - p1) - (1 - p2))^2)
  d <- 2 * ( 1 - ((p1 * p2) + ((1 - p1) * (1 - p2))) )
  res <- n/d
  res[is.nan(res)] <- 0L
  return(res)
}

pbs_fst_mean <- data.table (
  focal.close = sliding_window_mean(quick_fst(focal, close)),
  focal.outgroup = sliding_window_mean(quick_fst(focal, outgroup)),
  close.outgroup = sliding_window_mean(quick_fst(close, outgroup))
)

pbs_fst_mean[, PBS := ( (-log(1L - focal.close)) + (-log(1L - focal.outgroup)) - (-log(1L - close.outgroup)) ) / 2L]
pbs_fst_mean[PBS < 0L, PBS := 0L] # set to 0 negative values

i <- seq(1, (nrow(frq$bim) - 20L), by = 5L) + 19

pbs_fst_mean <- cbind(frq$bim[i, .(CHR, CM, POS, SNP)], pbs_fst_mean[, .(PBS)])
manhattan_plot(pbs_data = pbs_fst_mean, col_name = 'PBS', fig_name = 'pbs_fst_mean.png')
